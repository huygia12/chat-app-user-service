package org.service.user.chat_app_user_service.configurations;import io.grpc.ManagedChannel;import io.grpc.netty.shaded.io.grpc.netty.GrpcSslContexts;import io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder;import lombok.extern.slf4j.Slf4j;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import proto.IdGeneratorGrpc;import javax.net.ssl.SSLException;import java.io.File;@Slf4j@Configurationpublic class GrpcClientConfiguration {	private final int idGeneratorServerPort;	private final String idGeneratorServerAddress;	private final String caCert;	private final String clientCert;	private final String clientKey;	private final boolean usingTlS;	public GrpcClientConfiguration() {		this.idGeneratorServerPort = Integer.parseInt(System.getenv("ID_SERVICE_PORT"));		this.idGeneratorServerAddress = System.getenv("ID_SERVICE_ADDRESS");		this.caCert = System.getenv("ID_SERVICE_CA_CERT");		this.clientCert = System.getenv("ID_SERVICE_CLIENT_CERT");		this.clientKey = System.getenv("ID_SERVICE_CLIENT_KEY");		this.usingTlS = System.getenv("ID_TLS").equals("true");	}	@Bean	public ManagedChannel managedChannel() throws SSLException {		File caCertFile = new File(this.caCert);		File clientCertFile = new File(this.clientCert);		File clientKeyFile = new File(this.clientKey);		NettyChannelBuilder builder = NettyChannelBuilder.forAddress(idGeneratorServerAddress, idGeneratorServerPort);		if (usingTlS) {			log.info("Using Grpc mutual tsl configuration...");			return builder				.sslContext(GrpcSslContexts.forClient()					.trustManager(caCertFile)					.keyManager(clientCertFile, clientKeyFile)					.build())				.build();		}		else {			log.info("Using Grpc without mutual tsl configuration...");			return builder.usePlaintext().build();		}	}	@Bean	public IdGeneratorGrpc.IdGeneratorBlockingStub idGeneratorBlockingStub(ManagedChannel managedChannel) {		return IdGeneratorGrpc.newBlockingStub(managedChannel);	}}